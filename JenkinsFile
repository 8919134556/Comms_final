def recipientEmailTest = 'suryaanand456@gmail.com'
def recipientEmailBuild = 'suryaanand456@gmail.com'
def recipientEmailDeploy = 'suryaanand@infotracktelematics.com'
def deploymentApprovalURL = "${env.BUILD_URL}input"

def unitTestResult 
def reviewChangesValue
def codingStandardsValue
def adhereToRequirementsValue

def deployReviewChangesValue
def deployCodingStandardsValue
def deployAdhereToRequirementsValue

def emailBodyTest = """
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body style="font-family: Arial, sans-serif; font-size: 16px;">
    <div style="max-width: 600px; margin: 0 auto;">
        <div style="background-color: #007bff; color: #fff; padding: 20px; text-align: center;">
            <h2>Build Approval Required</h2>
        </div>
        <div style="padding: 20px;">
            <p>Dear Team,</p>
            <p>Testing of project <strong>${JOB_NAME}</strong> (build number ${BUILD_NUMBER}) requires your approval.</p>
            <p>Here are the results of the unit tests:</p>
            <p>Unit Test Result: ${unitTestResult}</p>
            <p>Please click the following button to approve or reject:</p>
            <p>
                <a style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px 20px; text-decoration: none; border-radius: 5px;" href="${deploymentApprovalURL}">Approve / Reject</a>
            </p>
            <p>Your feedback is important to us. Please provide your comments or suggestions.</p><br>
            <p>Regards,<br>Your Name</p>
        </div>
    </div>
</body>
</html>
"""

def emailBodyBuild = """
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body style="font-family: Arial, sans-serif; font-size: 16px;">
    <div style="max-width: 600px; margin: 0 auto;">
        <div style="background-color: #007bff; color: #fff; padding: 20px; text-align: center;">
            <h2>Build Approval Required</h2>
        </div>
        <div style="padding: 20px;">
            <p>Dear Team,</p>
            <p>Build of project <strong>${JOB_NAME}</strong> (build number ${BUILD_NUMBER}) requires your approval.</p>
            <p>Please click the following button to approve or reject:</p>
            <p>
                <a style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px 20px; text-decoration: none; border-radius: 5px;" href="${deploymentApprovalURL}">Approve / Reject</a>
            </p>
            <p>Your feedback is important to us. Please provide your comments or suggestions.</p><br>
            <p>Regards,<br>Your Name</p>
        </div>
    </div>
</body>
</html>
"""

def emailBodyDeploy = """
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body style="font-family: Arial, sans-serif; font-size: 16px;">
    <div style="max-width: 600px; margin: 0 auto;">
        <div style="background-color: #007bff; color: #fff; padding: 20px; text-align: center;">
            <h2>Deployment Approval Required</h2>
        </div>
        <div style="padding: 20px;">
            <p>Dear Team,</p>
            <p>Deployment of project <strong>${JOB_NAME}</strong> (build number ${BUILD_NUMBER}) requires your approval.</p>
            <p>Please click the following button to approve or reject:</p>
            <p>
                <a style="display: inline-block; background-color: #007bff; color: #fff; padding: 10px 20px; text-decoration: none; border-radius: 5px;" href="${deploymentApprovalURL}">Approve / Reject</a>
            </p>
            <p>Your feedback is important to us. Please provide your comments or suggestions.</p><br>
            <p>Regards,<br>Your Name</p>
        </div>
    </div>
</body>
</html>
"""

pipeline {
    agent any

    stages {
        stage('Checkout') {
            agent {
                label 'mdvr'
            }
            steps {
                git branch: 'gps_4040', url: 'https://github.com/8919134556/Comms_final.git'
            }
        }
        stage('Run Unit Tests') {
            steps {
                // Run unit tests and generate xUnit test results
                script {
                    sh 'python3 -m unittest discover -v test --xunit-xml test_results.xml'
                }
            }
        }
        stage('Publish Unit Test Results') {
            steps {
                // Publish xUnit test results
                xunit(
                    testTimeMargin: '3000', 
                    thresholdMode: 1, 
                    thresholds: [
                        skipped('0'),
                        failed('0'),
                        unstable('0')
                    ],
                    tools: [
                        xunitJUnit(pattern: 'test_results.xml')
                    ]
                )
            }
        }
        stage('Test Approval') {
            steps {
                script {
                    try {
                        // Approval for Test stage
                        timeout(time: 5, unit: 'MINUTES') {
                            emailext body: emailBodyTest,
                                     subject: 'Test Approval Required',
                                     to: recipientEmailTest,
                                     mimeType: 'text/html',
                                     attachmentsPattern: 'test_results.xml' // Attach the test results file

                            // Waiting for approval input
                            def testApproval = input message: 'Waiting for Test approval',
                                                  ok: 'Proceed',
                                                  submitter: 'test-approver',
                                                  parameters: [
                                                      string(defaultValue: '', description: 'Have you thoroughly reviewed the changes incorporated in this Unit test case?', name: 'reviewChanges'),
                                                      string(defaultValue: '', description: 'Are you confident that all modifications align with the project\'s coding standards and best practices?', name: 'codingStandards'),
                                                      string(defaultValue: '', description: 'Does the completed build adhere to the specified project requirements and objectives?', name: 'adhereToRequirements')
                                                  ]

                            // Store parameters
                            reviewChangesValue = testApproval['reviewChanges']
                            codingStandardsValue = testApproval['codingStandards']
                            adhereToRequirementsValue = testApproval['adhereToRequirements']

                            // Log user's responses
                            echo "Test Approval Responses: ${testApproval}"
                        }
                    } catch (err) {
                        currentBuild.result = 'FAILURE'
                        echo "An error occurred during the Test approval stage: ${err}"
                        error "Test approval stage encountered an error. Test will not proceed."
                    }
                }
            }
        }

        stage('Build Approval') {
            steps {
                script {
                    try {
                        // Approval for Build stage
                        timeout(time: 5, unit: 'MINUTES') {
                            emailext body: emailBodyBuild,
                                     subject: 'Build Approval Required',
                                     to: recipientEmailBuild,
                                     mimeType: 'text/html'

                            // Waiting for approval input
                            def buildApproval = input message: 'Waiting for build approval',
                                                  ok: 'Proceed',
                                                  submitter: 'build-approver',
                                                  parameters: [
                                                      string(defaultValue: '', description: 'Have you thoroughly reviewed the changes incorporated in this build?', name: 'reviewChanges'),
                                                      string(defaultValue: '', description: 'Are you confident that all modifications align with the project\'s coding standards and best practices?', name: 'codingStandards'),
                                                      string(defaultValue: '', description: 'Does the completed build adhere to the specified project requirements and objectives?', name: 'adhereToRequirements')
                                                  ]

                            // Store parameters
                            reviewChangesValue = buildApproval['reviewChanges']
                            codingStandardsValue = buildApproval['codingStandards']
                            adhereToRequirementsValue = buildApproval['adhereToRequirements']

                            // Log user's responses
                            echo "Build Approval Responses: ${buildApproval}"
                        }
                    } catch (err) {
                        currentBuild.result = 'FAILURE'
                        echo "An error occurred during the build approval stage: ${err}"
                        error "Build approval stage encountered an error. Build will not proceed."
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            agent {
                label 'mdvr'
            }
            steps {
                // Build Docker image
                sh 'docker build -t 9989228601/comms_gps_4040:1 .'

                // Push Docker image to Docker Hub registry
                withCredentials([usernamePassword(credentialsId: '377e98fd-7ba5-4b8f-a3a2-405f82ade900', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'docker push 9989228601/comms_gps_4040:1'
                }
            }
        }

        stage('Deployment Approval') {
            steps {
                script {
                    try {
                        // Approval for Deployment stage
                        timeout(time: 5, unit: 'MINUTES') {
                            emailext body: emailBodyDeploy,
                                     subject: 'Deployment Approval Required',
                                     to: recipientEmailDeploy,
                                     mimeType: 'text/html'

                            // Waiting for approval input
                            def deployApproval = input message: 'Waiting for deployment approval',
                                                    ok: 'Proceed',
                                                    submitter: 'deploy-approver',
                                                    parameters: [
                                                        string(defaultValue: '', description: 'Have you thoroughly reviewed the changes incorporated in this deployment?', name: 'reviewChanges'),
                                                        string(defaultValue: '', description: 'Are you confident that all modifications align with the project\'s coding standards and best practices?', name: 'codingStandards'),
                                                        string(defaultValue: '', description: 'Does the completed deployment adhere to the specified project requirements and objectives?', name: 'adhereToRequirements')
                                                    ]

                            // Store parameters
                            deployReviewChangesValue = deployApproval['reviewChanges']
                            deployCodingStandardsValue = deployApproval['codingStandards']
                            deployAdhereToRequirementsValue = deployApproval['adhereToRequirements']

                            // Log user's responses
                            echo "Deploy Approval Responses: ${deployApproval}"
                        }
                    } catch (err) {
                        currentBuild.result = 'FAILURE'
                        echo "An error occurred during the deployment approval stage: ${err}"
                        error "Deployment approval stage encountered an error. Deployment will not proceed."
                    }
                }
            }
        }

        stage('Deploy to Kubernetes Staging') {
            agent {
                label 'mdvr'
            }
            steps {
                // Apply Kubernetes manifests to staging environment
                sh 'kubectl apply -f deployment.yaml'
            }
        }
    }
}
